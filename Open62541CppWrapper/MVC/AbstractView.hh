//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef ABSTRACTVIEW_HH_
#define ABSTRACTVIEW_HH_

#include "AbstractModelObserver.hh"

namespace Smart {

/**
 * This class implements the View part of the Model-View-Controller (MVC)
 * design pattern. Please override the method update() in derived classes
 * to realize your view update strategy. In addition, it is recommended to
 * override the method getModel() such that it returns your specific model class
 * rather than the AbstractModel. This is particularly useful for the
 * Controller class of the MVC pattern.
 */
class AbstractView : public AbstractModelObserver
{
public:
	/// default constructor
	AbstractView(AbstractModel *model)
	:	AbstractModelObserver(model)
	{  }

	/// default destructor
	virtual ~AbstractView()
	{  }

	/// implements AbstractModelObserver
	virtual void update() override {
		// default is a no-op
	}

	/// returns a pinter to the abstract model (overload this method in derived classes to return the specific model type)
	virtual AbstractModel* getModel() const {
		return model;
	}
};

} /* namespace Smart */

#endif /* ABSTRACTVIEW_HH_ */
