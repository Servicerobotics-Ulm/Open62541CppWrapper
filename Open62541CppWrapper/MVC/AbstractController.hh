//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef ABSTRACTCONTROLLER_HH_
#define ABSTRACTCONTROLLER_HH_

#include "AbstractView.hh"

namespace Smart {

/**
 * This class implements the Controller part of the Model-View-Controller (MVC)
 * design pattern. The actual model can be internally accessed over the given view pointer.
 */
class AbstractController  : public AbstractModelObserver
{
public:
	/// default constructor attaches itself as an observer to the model accessed through the given view
	AbstractController(AbstractView *view)
	:	AbstractModelObserver()
	{
		if(view != 0) {
			view->getModel()->attach(this);
			this->model = view->getModel();
		}
	}

	/// default destructor
	virtual ~AbstractController() = default;

	/// call this method at the end of the main function
	virtual int run() = 0;
};

} /* namespace Smart */

#endif /* ABSTRACTCONTROLLER_HH_ */
