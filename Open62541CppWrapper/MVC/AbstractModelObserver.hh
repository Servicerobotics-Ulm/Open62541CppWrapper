//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef ABSTRACTMODELOBSERVER_H_
#define ABSTRACTMODELOBSERVER_H_

#include "AbstractModel.hh"

namespace Smart {

// forward declaration
class AbstractModel;

/**
 * This class defines the abstract base-class for the ModelObserver part
 * of the Model-View-Controller (MVC) design pattern. From this class,
 * the View and the Controller classes are derived. The abstract method 
 * update() must implement the respective update strategy of the derived class.
 */
class AbstractModelObserver {
protected:
	AbstractModel *model;

public:
	/**
	 * Default constructor attaches this class
	 * to the given model (in case the model is not null).
	 */
	AbstractModelObserver(AbstractModel *model=0);
	/**
	 * Default destructor detaches this class from the
	 * internal model (in case the model is not null).
	 */
	virtual ~AbstractModelObserver();

	/// implement this method in derived classes
	virtual void update() = 0;
};

} /* namespace Smart */

#endif /* ABSTRACTMODELOBSERVER_H_ */
