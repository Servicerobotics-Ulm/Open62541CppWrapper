//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef ABSTRACTMODEL_H_
#define ABSTRACTMODEL_H_

#include "AbstractModelObserver.hh"

#include <set>
#include <mutex>

namespace Smart {

// forward declaration
class AbstractModelObserver;

/**
 * This class implements the abstract version of the Model part of the Model-View-Controller (MVC)
 * design pattern. Please derive from this class to implement your specific version of the 
 * model (which can be for example a wrapper around a device driver, or a data-base or any
 * other data source/sink).
 */
class AbstractModel {
private:
	// observers registry
	std::mutex registry_mutex;
	std::set<AbstractModelObserver*> registry;

protected:
	// this flag indicates that some values have changed
	bool changed_values;
	// call this method (from within the internal thread) each time some values have changed
	void notify();

public:
	AbstractModel();
	virtual ~AbstractModel() = default;

	/// this method is used by AbstractModelObserver to get notified about model changes
	void attach(AbstractModelObserver *observer);
	void detach(AbstractModelObserver *observer);
};

} /* namespace Smart */

#endif /* ABSTRACTMODEL_H_ */
