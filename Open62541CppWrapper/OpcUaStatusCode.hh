//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef OPCUASTATUSCODE_H_
#define OPCUASTATUSCODE_H_

#include <iostream>

namespace OPCUA {

/** Enumeration class encoding result codes
 *
 * This C++11 enumeration class encodes generic result codes
 * (i.e. codes returned by C++ getter/setter and method calls to indicate
 *  the status of the internally implemented communication infrastructure).
 */
enum class StatusCode {
	/// Undefined (i.e. constructor) value
	UNDEFINED,
	/// Operation completed successfully
	ALL_OK,
	/// Connected status
	CONNECTED,
	/// Disconnected status
	DISCONNECTED,
	/// Element name (i.e. variable/method name) not found
	WRONG_ID,
	/// no new data is available (yet)
	NO_NEW_DATA,
	/// ???
	METHOD_BAD_CALL,
	/// number of used input arguments missmatch
	METHOD_INPUT_ARGUMENT_COUNT_MISMATCH,
	//METHOD_INPUT_ARGUMENT_TYPE_MISMATCH,
	//METHOD_OUTPUT_ARGUMENT_COUNT_MISMATCH,
	//METHOD_OUTPUT_ARGUMENT_TYPE_MISMATCH,

	/// communication error
	ERROR_COMMUNICATION
};

/** ostream operator for StatusCode
 *
 * This operator prints a string representation of the StatusCode to ostream.
 *
 */
inline std::ostream& operator << (std::ostream& os, const StatusCode& status)
{
	switch(status) {
		case StatusCode::ALL_OK: os << "ALL_OK"; break;
		case StatusCode::CONNECTED: os << "CONNECTED";  break;
		case StatusCode::DISCONNECTED: os << "DISCONNECTED"; break;
		case StatusCode::WRONG_ID: os << "WRONG_ID";  break;
		case StatusCode::NO_NEW_DATA: os << "NO_NEW_DATA";  break;
		case StatusCode::METHOD_BAD_CALL: os << "METHOD_BAD_CALL";  break;
		case StatusCode::METHOD_INPUT_ARGUMENT_COUNT_MISMATCH: os << "METHOD_INPUT_ARGUMENT_COUNT_MISMATCH";  break;
		case StatusCode::ERROR_COMMUNICATION: os << "ERROR_COMMUNICATION";  break;
		default: os << "UNDEFINED";
	}
	return os;
}

} /* namespace OPCUA */

#endif // OPCUASTATUSCODE_H_
